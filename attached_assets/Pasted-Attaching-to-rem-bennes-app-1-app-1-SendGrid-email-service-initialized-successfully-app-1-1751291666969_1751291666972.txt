Attaching to rem-bennes_app_1
app_1       | SendGrid email service initialized successfully.
app_1       | SendGrid email service initialized successfully.
app_1       | 1:49:57 PM [express] serving on port 5000
app_1       | ValidationError: The Express 'trust proxy' setting is true, which allows anyone to trivially bypass IP-based rate limiting. See https://express-rate-limit.github.io/ERR_ERL_PERMISSIVE_TRUST_PROXY/ for more information.
app_1       |     at Object.trustProxy (file:///app/node_modules/express-rate-limit/dist/index.mjs:141:13)
app_1       |     at wrappedValidations.<computed> [as trustProxy] (file:///app/node_modules/express-rate-limit/dist/index.mjs:370:22)
app_1       |     at Object.keyGenerator (file:///app/node_modules/express-rate-limit/dist/index.mjs:642:20)
app_1       |     at file:///app/node_modules/express-rate-limit/dist/index.mjs:696:32
app_1       |     at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
app_1       |     at async file:///app/node_modules/express-rate-limit/dist/index.mjs:676:5 {
app_1       |   code: 'ERR_ERL_PERMISSIVE_TRUST_PROXY',
app_1       |   help: 'https://express-rate-limit.github.io/ERR_ERL_PERMISSIVE_TRUST_PROXY/'
app_1       | }


app_1       | Database health check failed: ErrorEvent {
app_1       |   [Symbol(kTarget)]: WebSocket {
app_1       |     _events: [Object: null prototype] {
app_1       |       error: [Function],
app_1       |       message: [Function],
app_1       |       close: [Function],
app_1       |       open: [Function]
app_1       |     },
app_1       |     _eventsCount: 4,
app_1       |     _maxListeners: undefined,
app_1       |     _binaryType: 'arraybuffer',
app_1       |     _closeCode: 1006,
app_1       |     _closeFrameReceived: false,
app_1       |     _closeFrameSent: false,
app_1       |     _closeMessage: <Buffer >,
app_1       |     _closeTimer: null,
app_1       |     _errorEmitted: true,
app_1       |     _extensions: {},
app_1       |     _paused: false,
app_1       |     _protocol: '',
app_1       |     _readyState: 3,
app_1       |     _receiver: null,
app_1       |     _sender: null,
app_1       |     _socket: null,
app_1       |     _bufferedAmount: 0,
app_1       |     _isServer: false,
app_1       |     _redirects: 0,
app_1       |     _autoPong: true,
app_1       |     _url: 'wss://162.19.67.3/v2',
app_1       |     _req: null,
app_1       |     [Symbol(kCapture)]: false
app_1       |   },
app_1       |   [Symbol(kType)]: 'error',
app_1       |   [Symbol(kError)]: Error: connect ECONNREFUSED 162.19.67.3:443
app_1       |       at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1555:16) {
app_1       |     errno: -111,
app_1       |     code: 'ECONNREFUSED',
app_1       |     syscall: 'connect',
app_1       |     address: '162.19.67.3',
app_1       |     port: 443
app_1       |   },
app_1       |   [Symbol(kMessage)]: 'connect ECONNREFUSED 162.19.67.3:443'
app_1       | }
app_1       | 1:53:28 PM [express] GET /api/health 200 in 102ms :: {"status":"healthy","timestamp":"2025-06-30T13:â€¦

