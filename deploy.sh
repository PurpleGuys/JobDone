#!/bin/bash

# Script de d√©ploiement pour serveur VPS
# Usage: ./deploy.sh [production|staging]

set -e

ENV=${1:-production}

echo "üöÄ D√©ploiement de l'application Remondis en mode $ENV"

# Configuration des couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction de log
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

# V√©rification des pr√©requis
check_prerequisites() {
    log "V√©rification des pr√©requis..."
    
    command -v node >/dev/null 2>&1 || error "Node.js n'est pas install√©"
    command -v npm >/dev/null 2>&1 || error "npm n'est pas install√©"
    command -v git >/dev/null 2>&1 || error "git n'est pas install√©"
    
    # V√©rifier la version de Node.js
    NODE_VERSION=$(node --version | cut -d'.' -f1 | cut -d'v' -f2)
    if [ "$NODE_VERSION" -lt 18 ]; then
        error "Node.js version 18 ou sup√©rieure requise (version actuelle: $(node --version))"
    fi
    
    log "Pr√©requis valid√©s ‚úÖ"
}

# Configuration de l'environnement
setup_environment() {
    log "Configuration de l'environnement $ENV..."
    
    # Cr√©er les r√©pertoires n√©cessaires
    mkdir -p logs uploads dist ssl
    
    # V√©rifier la pr√©sence du fichier .env
    if [ ! -f ".env" ]; then
        if [ -f ".env.example" ]; then
            cp .env.example .env
            warning "Fichier .env cr√©√© depuis .env.example. Veuillez le configurer avant de continuer."
            error "Configuration requise dans le fichier .env"
        else
            error "Fichier .env.example introuvable"
        fi
    fi
    
    # D√©finir NODE_ENV
    export NODE_ENV=$ENV
    
    log "Environnement configur√© ‚úÖ"
}

# Installation des d√©pendances
install_dependencies() {
    log "Installation des d√©pendances..."
    
    if [ "$ENV" = "production" ]; then
        npm ci --only=production
    else
        npm ci
    fi
    
    log "D√©pendances install√©es ‚úÖ"
}

# Build de l'application
build_application() {
    log "Construction de l'application..."
    
    npm run build
    
    if [ ! -f "dist/index.js" ]; then
        error "Le build a √©chou√© - fichier dist/index.js introuvable"
    fi
    
    log "Application construite ‚úÖ"
}

# Configuration de la base de donn√©es
setup_database() {
    log "Configuration de la base de donn√©es..."
    
    # V√©rifier la connexion √† la base de donn√©es
    if ! npm run db:push --silent; then
        error "Impossible de se connecter √† la base de donn√©es. V√©rifiez DATABASE_URL dans .env"
    fi
    
    log "Base de donn√©es configur√©e ‚úÖ"
}

# Configuration des permissions
setup_permissions() {
    log "Configuration des permissions..."
    
    # Permissions pour les r√©pertoires
    chmod 755 logs uploads
    chmod 600 .env
    
    # Permissions pour les scripts
    chmod +x deploy.sh
    
    log "Permissions configur√©es ‚úÖ"
}

# Configuration du serveur web
setup_web_server() {
    log "Configuration du serveur web..."
    
    # V√©rifier si PM2 est install√©
    if ! command -v pm2 >/dev/null 2>&1; then
        log "Installation de PM2..."
        npm install -g pm2
    fi
    
    # V√©rifier si Nginx est install√© (optionnel)
    if ! command -v nginx >/dev/null 2>&1; then
        warning "Nginx n'est pas install√©. Consid√©rez l'installer pour un reverse proxy."
    fi
    
    log "Serveur web configur√© ‚úÖ"
}

# D√©marrage de l'application
start_application() {
    log "D√©marrage de l'application..."
    
    # Arr√™ter l'application si elle tourne d√©j√†
    pm2 stop remondis-app 2>/dev/null || true
    pm2 delete remondis-app 2>/dev/null || true
    
    # D√©marrer avec PM2
    pm2 start ecosystem.config.js --env $ENV
    
    # Sauvegarder la configuration PM2
    pm2 save
    
    # Configurer PM2 pour d√©marrer au boot (si pas d√©j√† fait)
    pm2 startup 2>/dev/null || true
    
    log "Application d√©marr√©e ‚úÖ"
}

# V√©rification de la sant√© de l'application
health_check() {
    log "V√©rification de la sant√© de l'application..."
    
    # Attendre que l'application d√©marre
    sleep 5
    
    # V√©rifier que l'application r√©pond
    PORT=${PORT:-5000}
    if curl -f http://localhost:$PORT/api/health >/dev/null 2>&1; then
        log "Application accessible sur le port $PORT ‚úÖ"
    else
        warning "L'application ne semble pas r√©pondre sur le port $PORT"
        log "V√©rifiez les logs avec: pm2 logs remondis-app"
    fi
}

# Configuration du firewall (optionnel)
setup_firewall() {
    if command -v ufw >/dev/null 2>&1; then
        log "Configuration du firewall..."
        
        ufw allow 22/tcp    # SSH
        ufw allow 80/tcp    # HTTP
        ufw allow 443/tcp   # HTTPS
        ufw allow 5000/tcp  # Application (si pas de reverse proxy)
        
        log "Firewall configur√© ‚úÖ"
    fi
}

# Affichage des informations post-d√©ploiement
show_deployment_info() {
    log "üéâ D√©ploiement termin√© avec succ√®s!"
    echo ""
    echo "üìã Informations de d√©ploiement:"
    echo "   - Environnement: $ENV"
    echo "   - Port: ${PORT:-5000}"
    echo "   - Logs: pm2 logs remondis-app"
    echo "   - Status: pm2 status"
    echo "   - Restart: pm2 restart remondis-app"
    echo ""
    echo "üîß Commandes utiles:"
    echo "   - pm2 monit                    # Monitoring en temps r√©el"
    echo "   - pm2 logs remondis-app        # Voir les logs"
    echo "   - pm2 reload remondis-app      # Red√©marrage sans downtime"
    echo "   - pm2 stop remondis-app        # Arr√™ter l'application"
    echo ""
    
    if [ "$ENV" = "production" ]; then
        echo "‚ö†Ô∏è  N'oubliez pas de:"
        echo "   - Configurer SSL/HTTPS"
        echo "   - Mettre en place les sauvegardes de base de donn√©es"
        echo "   - Configurer la surveillance"
    fi
}

# Script principal
main() {
    check_prerequisites
    setup_environment
    install_dependencies
    build_application
    setup_database
    setup_permissions
    setup_web_server
    start_application
    health_check
    setup_firewall
    show_deployment_info
}

# Ex√©cution du script principal
main "$@"