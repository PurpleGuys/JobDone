version: '3.8'

services:
  # Application BennesPro
  app:
    build: .
    container_name: bennespro_app
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:POSTGRES_PASSWORD_PLACEHOLDER@postgres:5432/remondis_db
      - JWT_SECRET=JWT_SECRET_PLACEHOLDER
      - SESSION_SECRET=SESSION_SECRET_PLACEHOLDER
    depends_on:
      - postgres
      - redis
    networks:
      - bennespro_network

  # Base de donn√©es PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: bennespro_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: remondis_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: POSTGRES_PASSWORD_PLACEHOLDER
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - bennespro_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bennespro_redis
    restart: unless-stopped
    command: redis-server --requirepass REDIS_PASSWORD_PLACEHOLDER
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bennespro_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: bennespro_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - app
    networks:
      - bennespro_network

networks:
  bennespro_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local