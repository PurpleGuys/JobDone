version: '3.8'

services:
  # Application BennesPro
  app:
    build: .
    container_name: bennespro_app
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:POSTGRES_PASSWORD_PLACEHOLDER@postgres:5432/remondis_db
      - JWT_SECRET=JWT_SECRET_PLACEHOLDER
      - SESSION_SECRET=SESSION_SECRET_PLACEHOLDER
    depends_on:
      - postgres
      - redis
    networks:
      - bennespro_network

  # Base de donn√©es PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: bennespro_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: remondis_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: POSTGRES_PASSWORD_PLACEHOLDER
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - bennespro_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bennespro_redis
    restart: unless-stopped
    command: redis-server --requirepass REDIS_PASSWORD_PLACEHOLDER
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bennespro_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: bennespro_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - app
    networks:
      - bennespro_network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: bennespro_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - bennespro_network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: bennespro_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=GRAFANA_PASSWORD_PLACEHOLDER
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - bennespro_network

  # Loki Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: bennespro_loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - bennespro_network

  # Promtail Log Collector
  promtail:
    image: grafana/promtail:latest
    container_name: bennespro_promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - bennespro_network

  # AlertManager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: bennespro_alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    networks:
      - bennespro_network

  # Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: bennespro_node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - bennespro_network

  # Watchtower Auto-Update
  watchtower:
    image: containrrr/watchtower:latest
    container_name: bennespro_watchtower
    restart: unless-stopped
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_SCHEDULE=0 0 4 * * *
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - bennespro_network

networks:
  bennespro_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  alertmanager_data:
    driver: local