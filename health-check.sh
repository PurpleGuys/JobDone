#!/bin/bash

# Script de v√©rification de sant√© pour l'application Remondis
# Usage: ./health-check.sh [production|staging|development]

ENV=${1:-development}
PORT=${2:-5000}
HOST=${3:-localhost}

echo "üè• V√©rification de sant√© - Environnement: $ENV"
echo "==============================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction pour afficher les r√©sultats
print_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

# 1. V√©rifier que l'application r√©pond
echo "üåê V√©rification de la connectivit√©..."
if curl -f -s "http://$HOST:$PORT/api/health" > /dev/null; then
    print_result 0 "Application accessible sur http://$HOST:$PORT"
    
    # R√©cup√©rer les informations de sant√©
    HEALTH_DATA=$(curl -s "http://$HOST:$PORT/api/health")
    echo "üìä Informations syst√®me:"
    echo "$HEALTH_DATA" | grep -o '"[^"]*":[^,}]*' | sed 's/"//g' | while IFS=: read key value; do
        echo "   $key: $value"
    done
else
    print_result 1 "Application non accessible sur http://$HOST:$PORT"
    exit 1
fi

# 2. V√©rifier les endpoints critiques
echo -e "\nüîç V√©rification des endpoints..."

# Test de l'API services
if curl -f -s "http://$HOST:$PORT/api/services" > /dev/null; then
    print_result 0 "Endpoint /api/services op√©rationnel"
else
    print_result 1 "Endpoint /api/services non accessible"
fi

# Test de l'authentification (doit retourner 401)
AUTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://$HOST:$PORT/api/auth/me")
if [ "$AUTH_STATUS" = "401" ]; then
    print_result 0 "Endpoint d'authentification s√©curis√©"
else
    print_result 1 "Probl√®me avec l'endpoint d'authentification (code: $AUTH_STATUS)"
fi

# 3. V√©rifier la base de donn√©es (si accessible)
echo -e "\nüóÑÔ∏è  V√©rification de la base de donn√©es..."
DB_STATUS=$(curl -s "http://$HOST:$PORT/api/health" | grep -o '"database":"[^"]*"' | cut -d'"' -f4)
if [ "$DB_STATUS" = "connected" ]; then
    print_result 0 "Base de donn√©es connect√©e"
else
    print_result 1 "Probl√®me de connexion base de donn√©es"
fi

# 4. V√©rifier les ressources syst√®me (si PM2 est utilis√©)
if command -v pm2 &> /dev/null; then
    echo -e "\nüíª V√©rification des processus PM2..."
    
    PM2_STATUS=$(pm2 jlist 2>/dev/null | grep "remondis-app" | grep -o '"status":"[^"]*"' | cut -d'"' -f4)
    if [ "$PM2_STATUS" = "online" ]; then
        print_result 0 "Processus PM2 en ligne"
        
        # Afficher les statistiques PM2
        echo "üìà Statistiques PM2:"
        pm2 show remondis-app 2>/dev/null | grep -E "(cpu|memory|uptime)" | while read line; do
            echo "   $line"
        done
    else
        print_result 1 "Processus PM2 hors ligne ou non trouv√©"
    fi
fi

# 5. V√©rifier l'espace disque
echo -e "\nüíæ V√©rification de l'espace disque..."
DISK_USAGE=$(df -h . | awk 'NR==2 {print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -lt 90 ]; then
    print_result 0 "Espace disque suffisant ($DISK_USAGE% utilis√©)"
else
    print_result 1 "Espace disque critique ($DISK_USAGE% utilis√©)"
fi

# 6. V√©rifier la m√©moire
echo -e "\nüß† V√©rification de la m√©moire..."
if command -v free &> /dev/null; then
    MEM_USAGE=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
    if [ "$MEM_USAGE" -lt 85 ]; then
        print_result 0 "Utilisation m√©moire normale ($MEM_USAGE%)"
    else
        print_result 1 "Utilisation m√©moire √©lev√©e ($MEM_USAGE%)"
    fi
fi

# 7. V√©rifier les logs r√©cents pour les erreurs
echo -e "\nüìù V√©rification des logs r√©cents..."
if [ -f "logs/err.log" ]; then
    ERROR_COUNT=$(tail -100 logs/err.log 2>/dev/null | grep -c "ERROR\|FATAL" || echo "0")
    if [ "$ERROR_COUNT" -eq 0 ]; then
        print_result 0 "Aucune erreur r√©cente dans les logs"
    else
        print_result 1 "$ERROR_COUNT erreurs trouv√©es dans les logs r√©cents"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Fichier de logs d'erreur non trouv√©${NC}"
fi

# 8. Test de performance basique
echo -e "\n‚ö° Test de performance..."
RESPONSE_TIME=$(curl -s -w "%{time_total}" -o /dev/null "http://$HOST:$PORT/api/health")
RESPONSE_MS=$(echo "$RESPONSE_TIME * 1000" | bc 2>/dev/null || echo "N/A")

if [ "$RESPONSE_MS" != "N/A" ] && [ "$(echo "$RESPONSE_TIME < 2.0" | bc 2>/dev/null)" = "1" ]; then
    print_result 0 "Temps de r√©ponse acceptable (${RESPONSE_MS}ms)"
else
    print_result 1 "Temps de r√©ponse lent (${RESPONSE_MS}ms)"
fi

# R√©sum√© final
echo -e "\nüìã R√âSUM√â"
echo "=========="
echo "Application: Remondis Waste Management"
echo "Environnement: $ENV"
echo "URL: http://$HOST:$PORT"
echo "Timestamp: $(date)"

# Code de sortie bas√© sur les v√©rifications critiques
if curl -f -s "http://$HOST:$PORT/api/health" > /dev/null && [ "$DB_STATUS" = "connected" ]; then
    echo -e "\n${GREEN}üéâ Syst√®me op√©rationnel${NC}"
    exit 0
else
    echo -e "\n${RED}‚ö†Ô∏è  Probl√®mes d√©tect√©s - Intervention requise${NC}"
    exit 1
fi