#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';

const REQUIRED_FILES = [
  '.env.example',
  'Dockerfile',
  'docker-compose.yml',
  'ecosystem.config.js',
  'nginx.conf',
  'deploy.sh',
  'package.json',
  'shared/schema.ts',
  'server/index.ts',
  'client/src/main.tsx'
];

const REQUIRED_DIRECTORIES = [
  'scripts',
  'server',
  'client',
  'shared'
];

const REQUIRED_ENV_VARS = [
  'DATABASE_URL',
  'SESSION_SECRET',
  'JWT_SECRET',
  'NODE_ENV',
  'PORT'
];

const OPTIONAL_ENV_VARS = [
  'SENDGRID_API_KEY',
  'GOOGLE_MAPS_API_KEY',
  'PAYPLUG_SECRET_KEY',
  'APP_BASE_URL'
];

function checkFileExists(filePath) {
  try {
    const stats = fs.statSync(filePath);
    return { exists: true, size: stats.size };
  } catch {
    return { exists: false, size: 0 };
  }
}

function checkDirectoryExists(dirPath) {
  try {
    const stats = fs.statSync(dirPath);
    return stats.isDirectory();
  } catch {
    return false;
  }
}

function checkEnvFile() {
  const envPath = '.env';
  const envExamplePath = '.env.example';
  
  console.log('\nüîß V√©rification des fichiers de configuration...');
  
  const envExists = checkFileExists(envPath).exists;
  const envExampleExists = checkFileExists(envExamplePath).exists;
  
  if (!envExampleExists) {
    console.log('‚ùå .env.example manquant');
    return false;
  }
  
  if (!envExists) {
    console.log('‚ö†Ô∏è  .env manquant - utilisez: cp .env.example .env');
    return false;
  }
  
  // V√©rifier les variables d'environnement requises
  const envContent = fs.readFileSync(envPath, 'utf8');
  const missingRequired = REQUIRED_ENV_VARS.filter(varName => 
    !envContent.includes(`${varName}=`) || envContent.includes(`${varName}=""`)
  );
  
  const missingOptional = OPTIONAL_ENV_VARS.filter(varName => 
    !envContent.includes(`${varName}=`) || envContent.includes(`${varName}=""`)
  );
  
  if (missingRequired.length > 0) {
    console.log(`‚ùå Variables d'environnement requises manquantes: ${missingRequired.join(', ')}`);
    return false;
  }
  
  if (missingOptional.length > 0) {
    console.log(`‚ö†Ô∏è  Variables d'environnement optionnelles non configur√©es: ${missingOptional.join(', ')}`);
  }
  
  console.log('‚úÖ Configuration d\'environnement valide');
  return true;
}

function checkRequiredFiles() {
  console.log('\nüìÅ V√©rification des fichiers requis...');
  let allFilesPresent = true;
  
  REQUIRED_FILES.forEach(file => {
    const check = checkFileExists(file);
    if (check.exists) {
      console.log(`‚úÖ ${file} (${Math.round(check.size / 1024)}KB)`);
    } else {
      console.log(`‚ùå ${file} manquant`);
      allFilesPresent = false;
    }
  });
  
  return allFilesPresent;
}

function checkRequiredDirectories() {
  console.log('\nüìÇ V√©rification des r√©pertoires requis...');
  let allDirsPresent = true;
  
  REQUIRED_DIRECTORIES.forEach(dir => {
    if (checkDirectoryExists(dir)) {
      const files = fs.readdirSync(dir).length;
      console.log(`‚úÖ ${dir}/ (${files} fichiers)`);
    } else {
      console.log(`‚ùå ${dir}/ manquant`);
      allDirsPresent = false;
    }
  });
  
  return allDirsPresent;
}

function checkNodeModules() {
  console.log('\nüì¶ V√©rification des d√©pendances...');
  
  if (!checkDirectoryExists('node_modules')) {
    console.log('‚ùå node_modules manquant - lancez: npm install');
    return false;
  }
  
  try {
    // V√©rifier quelques d√©pendances critiques
    const criticalDeps = ['drizzle-orm', 'express', 'react', 'vite'];
    const missingDeps = criticalDeps.filter(dep => 
      !checkDirectoryExists(`node_modules/${dep}`)
    );
    
    if (missingDeps.length > 0) {
      console.log(`‚ùå D√©pendances manquantes: ${missingDeps.join(', ')}`);
      return false;
    }
    
    console.log('‚úÖ D√©pendances install√©es');
    return true;
  } catch (error) {
    console.log('‚ùå Erreur lors de la v√©rification des d√©pendances');
    return false;
  }
}

function checkBuildCapability() {
  console.log('\nüî® V√©rification de la capacit√© de build...');
  
  try {
    // V√©rifier que TypeScript compile
    execSync('npx tsc --noEmit', { stdio: 'pipe' });
    console.log('‚úÖ Compilation TypeScript r√©ussie');
    
    // Essayer de builder (en mode test)
    console.log('üîÑ Test du processus de build...');
    execSync('npm run build', { stdio: 'pipe' });
    
    // V√©rifier que les fichiers de build existent
    if (checkFileExists('dist/index.js').exists) {
      console.log('‚úÖ Build de production r√©ussi');
      return true;
    } else {
      console.log('‚ùå Build √©chou√© - dist/index.js introuvable');
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erreur lors du build:', error.message.split('\n')[0]);
    return false;
  }
}

function checkDatabaseSchema() {
  console.log('\nüóÑÔ∏è  V√©rification du sch√©ma de base de donn√©es...');
  
  try {
    // V√©rifier que le sch√©ma est valide
    const schemaPath = 'shared/schema.ts';
    const schemaContent = fs.readFileSync(schemaPath, 'utf8');
    
    const requiredTables = [
      'users', 'services', 'orders', 'sessions',
      'abandonedCheckouts', 'inactivityNotifications'
    ];
    
    const missingTables = requiredTables.filter(table => 
      !schemaContent.includes(`export const ${table}`)
    );
    
    if (missingTables.length > 0) {
      console.log(`‚ùå Tables manquantes dans le sch√©ma: ${missingTables.join(', ')}`);
      return false;
    }
    
    console.log('‚úÖ Sch√©ma de base de donn√©es complet');
    return true;
  } catch (error) {
    console.log('‚ùå Erreur lors de la v√©rification du sch√©ma');
    return false;
  }
}

function checkSecurityConfiguration() {
  console.log('\nüîí V√©rification de la configuration de s√©curit√©...');
  
  const envContent = fs.readFileSync('.env', 'utf8');
  let securityIssues = [];
  
  // V√©rifier la longueur des secrets
  const secretVars = ['SESSION_SECRET', 'JWT_SECRET'];
  secretVars.forEach(secret => {
    const match = envContent.match(new RegExp(`${secret}="?([^"\\n]+)"?`));
    if (match && match[1].length < 32) {
      securityIssues.push(`${secret} trop court (minimum 32 caract√®res)`);
    }
  });
  
  // V√©rifier NODE_ENV
  if (!envContent.includes('NODE_ENV="production"')) {
    securityIssues.push('NODE_ENV devrait √™tre "production" pour le d√©ploiement');
  }
  
  // V√©rifier les permissions du fichier .env
  try {
    const stats = fs.statSync('.env');
    const permissions = stats.mode & 0o777;
    if (permissions !== 0o600) {
      securityIssues.push('Permissions .env incorrectes (utilisez: chmod 600 .env)');
    }
  } catch (error) {
    securityIssues.push('Impossible de v√©rifier les permissions .env');
  }
  
  if (securityIssues.length > 0) {
    console.log('‚ö†Ô∏è  Probl√®mes de s√©curit√© d√©tect√©s:');
    securityIssues.forEach(issue => console.log(`   - ${issue}`));
    return false;
  }
  
  console.log('‚úÖ Configuration de s√©curit√© appropri√©e');
  return true;
}

function generateDeploymentReport() {
  console.log('\nüìã G√©n√©ration du rapport de d√©ploiement...');
  
  const report = {
    timestamp: new Date().toISOString(),
    nodeVersion: process.version,
    npmVersion: execSync('npm --version', { encoding: 'utf8' }).trim(),
    platform: process.platform,
    checks: {
      files: checkRequiredFiles(),
      directories: checkRequiredDirectories(),
      environment: checkEnvFile(),
      dependencies: checkNodeModules(),
      build: checkBuildCapability(),
      database: checkDatabaseSchema(),
      security: checkSecurityConfiguration()
    }
  };
  
  const reportPath = 'deployment-report.json';
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
  console.log(`‚úÖ Rapport sauvegard√©: ${reportPath}`);
  
  return report;
}

function main() {
  console.log('üöÄ V√©rification de l\'√©tat de pr√©paration au d√©ploiement VPS');
  console.log('========================================================');
  
  const report = generateDeploymentReport();
  const allChecksPass = Object.values(report.checks).every(check => check === true);
  
  console.log('\nüìä R√âSUM√â DES V√âRIFICATIONS');
  console.log('============================');
  
  Object.entries(report.checks).forEach(([check, passed]) => {
    const status = passed ? '‚úÖ' : '‚ùå';
    const name = check.charAt(0).toUpperCase() + check.slice(1);
    console.log(`${status} ${name}`);
  });
  
  console.log('\nüîç STATUT GLOBAL');
  console.log('=================');
  
  if (allChecksPass) {
    console.log('üéâ SUCC√àS - Application pr√™te pour le d√©ploiement!');
    console.log('\nüìã Prochaines √©tapes:');
    console.log('1. Transf√©rer les fichiers sur le serveur VPS');
    console.log('2. Configurer la base de donn√©es PostgreSQL');
    console.log('3. Lancer le script de d√©ploiement: ./deploy.sh production');
    console.log('4. Configurer Nginx et SSL');
    console.log('5. Tester l\'application en production');
  } else {
    console.log('‚ö†Ô∏è  ATTENTION - Probl√®mes d√©tect√©s √† corriger avant d√©ploiement');
    console.log('\nüîß Actions requises:');
    
    if (!report.checks.files) {
      console.log('- V√©rifier que tous les fichiers requis sont pr√©sents');
    }
    if (!report.checks.environment) {
      console.log('- Configurer le fichier .env avec toutes les variables requises');
    }
    if (!report.checks.dependencies) {
      console.log('- Installer les d√©pendances: npm install');
    }
    if (!report.checks.build) {
      console.log('- Corriger les erreurs de build');
    }
    if (!report.checks.database) {
      console.log('- V√©rifier le sch√©ma de base de donn√©es');
    }
    if (!report.checks.security) {
      console.log('- Corriger les probl√®mes de s√©curit√© identifi√©s');
    }
  }
  
  process.exit(allChecksPass ? 0 : 1);
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}