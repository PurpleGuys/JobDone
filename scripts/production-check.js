#!/usr/bin/env node

/**
 * Script de v√©rification de production
 * S'assure que l'application fonctionne en mode production
 */

import { execSync } from 'child_process';
import { readFileSync, existsSync } from 'fs';

console.log('üîç V√©rification de la configuration production...');

// 1. V√©rifier les variables d'environnement
console.log('üìã V√©rification des variables d\'environnement...');
const requiredEnvVars = ['NODE_ENV', 'DATABASE_URL', 'JWT_SECRET', 'SESSION_SECRET'];
let envOk = true;

for (const envVar of requiredEnvVars) {
  if (!process.env[envVar]) {
    console.error(`‚ùå Variable d'environnement manquante: ${envVar}`);
    envOk = false;
  } else {
    console.log(`‚úÖ ${envVar}: configur√©`);
  }
}

// 2. V√©rifier que NODE_ENV est en production
if (process.env.NODE_ENV !== 'production') {
  console.error(`‚ùå NODE_ENV doit √™tre 'production', actuellement: ${process.env.NODE_ENV}`);
  envOk = false;
} else {
  console.log('‚úÖ NODE_ENV: production');
}

// 3. V√©rifier l'existence des fichiers compil√©s
console.log('üìÅ V√©rification des fichiers compil√©s...');
const compiledFile = 'dist/index.js';
if (!existsSync(compiledFile)) {
  console.error(`‚ùå Fichier compil√© manquant: ${compiledFile}`);
  envOk = false;
} else {
  console.log(`‚úÖ Fichier compil√© trouv√©: ${compiledFile}`);
}

// 4. V√©rifier le package.json pour le script start
console.log('üì¶ V√©rification du package.json...');
try {
  const packageJson = JSON.parse(readFileSync('package.json', 'utf8'));
  if (!packageJson.scripts?.start) {
    console.error('‚ùå Script "start" manquant dans package.json');
    envOk = false;
  } else if (!packageJson.scripts.start.includes('node dist/index.js')) {
    console.error('‚ùå Script "start" ne pointe pas vers dist/index.js');
    envOk = false;
  } else {
    console.log('‚úÖ Script "start" configur√© correctement');
  }
} catch (error) {
  console.error('‚ùå Erreur lecture package.json:', error.message);
  envOk = false;
}

// 5. V√©rifier les scripts Docker
console.log('üê≥ V√©rification de la configuration Docker...');
if (!existsSync('Dockerfile')) {
  console.error('‚ùå Dockerfile manquant');
  envOk = false;
} else {
  const dockerfile = readFileSync('Dockerfile', 'utf8');
  if (!dockerfile.includes('CMD ["npm", "start"]')) {
    console.error('‚ùå Dockerfile ne sp√©cifie pas CMD ["npm", "start"]');
    envOk = false;
  } else {
    console.log('‚úÖ Dockerfile configur√© pour production');
  }
}

if (!existsSync('docker-compose.yml')) {
  console.error('‚ùå docker-compose.yml manquant');
  envOk = false;
} else {
  const dockerCompose = readFileSync('docker-compose.yml', 'utf8');
  if (!dockerCompose.includes('NODE_ENV=production')) {
    console.error('‚ùå docker-compose.yml ne sp√©cifie pas NODE_ENV=production');
    envOk = false;
  } else {
    console.log('‚úÖ docker-compose.yml configur√© pour production');
  }
}

// 6. R√©sum√© final
console.log('\nüéØ R√©sum√© de la v√©rification production:');
if (envOk) {
  console.log('‚úÖ TOUS LES TESTS PASS√âS - Configuration production OK !');
  console.log('üöÄ L\'application est pr√™te pour le d√©ploiement production');
  process.exit(0);
} else {
  console.log('‚ùå √âCHEC - Probl√®mes de configuration d√©tect√©s');
  console.log('üîß Corrigez les erreurs ci-dessus avant le d√©ploiement');
  process.exit(1);
}