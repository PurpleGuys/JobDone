#!/bin/bash

# Solution compl√®te SSL pour purpleguy.world
# G√®re tous les conflits nginx et obtient le certificat SSL

echo "üîê SOLUTION COMPL√àTE SSL - purpleguy.world"
echo "=========================================="

DOMAIN="purpleguy.world"
EMAIL="admin@purpleguy.world"

# √âtape 1: Identifier et arr√™ter les services qui utilisent le port 80
echo "üîç Identification des services sur le port 80..."

# V√©rifier qui utilise le port 80
PORT_80_USERS=$(sudo netstat -tlnp 2>/dev/null | grep :80 || sudo ss -tlnp | grep :80 || true)
echo "Services sur port 80:"
echo "$PORT_80_USERS"

# Arr√™ter nginx syst√®me s'il existe
if sudo systemctl is-active --quiet nginx 2>/dev/null; then
    echo "üõë Arr√™t nginx syst√®me..."
    sudo systemctl stop nginx
    echo "‚úÖ Nginx syst√®me arr√™t√©"
fi

# Arr√™ter apache s'il existe
if sudo systemctl is-active --quiet apache2 2>/dev/null; then
    echo "üõë Arr√™t Apache..."
    sudo systemctl stop apache2
    echo "‚úÖ Apache arr√™t√©"
fi

# Arr√™ter docker-compose actuel
echo "üõë Arr√™t services Docker..."
docker-compose down 2>/dev/null || true

# Attendre que le port soit lib√©r√©
echo "‚è≥ Attente lib√©ration port 80..."
sleep 5

# V√©rifier que le port 80 est libre
if sudo netstat -tlnp 2>/dev/null | grep -q :80 || sudo ss -tlnp 2>/dev/null | grep -q :80; then
    echo "‚ùå Port 80 encore occup√©. For√ßage..."
    # Tuer tous les processus sur le port 80
    sudo fuser -k 80/tcp 2>/dev/null || true
    sleep 3
fi

# √âtape 2: Cr√©er les dossiers SSL
echo "üìÅ Cr√©ation des dossiers SSL..."
mkdir -p ./certbot/conf
mkdir -p ./certbot/www
sudo chown -R $USER:$USER ./certbot/

# √âtape 3: Lancer nginx temporaire pour validation ACME
echo "üöÄ D√©marrage nginx temporaire pour validation SSL..."

# Configuration nginx minimale pour ACME
cat > nginx-acme.conf << 'EOF'
events {
    worker_connections 1024;
}

http {
    server {
        listen 80;
        server_name purpleguy.world www.purpleguy.world;
        
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
            try_files $uri $uri/ =404;
        }
        
        location / {
            return 200 "ACME validation server";
            add_header Content-Type text/plain;
        }
    }
}
EOF

# Lancer nginx temporaire
docker run -d --name nginx-acme \
    -p 80:80 \
    -v $(pwd)/nginx-acme.conf:/etc/nginx/nginx.conf \
    -v $(pwd)/certbot/www:/var/www/certbot \
    nginx:alpine

# Attendre d√©marrage
sleep 5

# Test du serveur ACME
echo "üß™ Test serveur ACME..."
if curl -s "http://$DOMAIN/" | grep -q "ACME validation"; then
    echo "‚úÖ Serveur ACME op√©rationnel"
else
    echo "‚ö†Ô∏è Serveur ACME ne r√©pond pas comme attendu"
fi

# √âtape 4: Obtenir le certificat SSL
echo "üîê Obtention certificat SSL Let's Encrypt..."

# Obtenir le certificat
docker run --rm \
    -v $(pwd)/certbot/conf:/etc/letsencrypt \
    -v $(pwd)/certbot/www:/var/www/certbot \
    certbot/certbot \
    certonly --webroot \
    --webroot-path=/var/www/certbot \
    --email $EMAIL \
    --agree-tos \
    --no-eff-email \
    --expand \
    -d $DOMAIN \
    -d www.$DOMAIN

# V√©rifier l'obtention du certificat
if [ -f "./certbot/conf/live/$DOMAIN/fullchain.pem" ]; then
    echo "‚úÖ Certificat SSL obtenu avec succ√®s!"
    
    # Afficher les d√©tails du certificat
    echo "üìã D√©tails du certificat:"
    docker run --rm -v $(pwd)/certbot/conf:/etc/letsencrypt certbot/certbot certificates
else
    echo "‚ùå √âchec obtention certificat SSL"
    
    # Essayer avec le domaine principal uniquement
    echo "üîÑ Tentative avec domaine principal uniquement..."
    docker run --rm \
        -v $(pwd)/certbot/conf:/etc/letsencrypt \
        -v $(pwd)/certbot/www:/var/www/certbot \
        certbot/certbot \
        certonly --webroot \
        --webroot-path=/var/www/certbot \
        --email $EMAIL \
        --agree-tos \
        --no-eff-email \
        -d $DOMAIN
fi

# Arr√™ter nginx temporaire
echo "üõë Arr√™t nginx temporaire..."
docker stop nginx-acme
docker rm nginx-acme
rm nginx-acme.conf

# √âtape 5: Configurer l'environnement pour HTTPS
echo "‚öôÔ∏è Configuration environnement HTTPS..."
cp docker-fix.env .env

# G√©n√©rer param√®tres DH si n√©cessaire
if [ ! -f "./certbot/conf/ssl-dhparams.pem" ]; then
    echo "üîë G√©n√©ration param√®tres Diffie-Hellman..."
    openssl dhparam -out ./certbot/conf/ssl-dhparams.pem 2048
fi

# √âtape 6: Cr√©er configuration nginx finale
echo "üîß Configuration nginx finale..."

# Si certificat obtenu, utiliser configuration HTTPS compl√®te
if [ -f "./certbot/conf/live/$DOMAIN/fullchain.pem" ]; then
    echo "‚úÖ Utilisation configuration HTTPS compl√®te"
    # Le nginx.conf est d√©j√† configur√© pour HTTPS
else
    echo "‚ö†Ô∏è Certificat non obtenu, configuration HTTP seulement"
    # Cr√©er configuration nginx sans SSL
    cat > nginx-http-only.conf << 'EOF'
events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;

    upstream app {
        server app:5000;
    }

    server {
        listen 80;
        server_name purpleguy.world www.purpleguy.world 162.19.67.3;
        
        location / {
            proxy_pass http://app;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }
    }
}
EOF
    cp nginx-http-only.conf nginx.conf
fi

# √âtape 7: D√©marrer les services finaux
echo "üöÄ D√©marrage services finaux..."
docker-compose build --no-cache app
docker-compose up -d

# Attendre d√©marrage
echo "‚è≥ Attente d√©marrage complet..."
sleep 30

# √âtape 8: Tests finaux
echo "üß™ Tests finaux..."

# Test HTTP
if curl -s "http://$DOMAIN" > /dev/null; then
    echo "‚úÖ Site accessible en HTTP"
else
    echo "‚ùå Site non accessible en HTTP"
fi

# Test HTTPS si certificat obtenu
if [ -f "./certbot/conf/live/$DOMAIN/fullchain.pem" ]; then
    if curl -s -k "https://$DOMAIN" > /dev/null; then
        echo "‚úÖ Site accessible en HTTPS"
    else
        echo "‚ö†Ô∏è Site non accessible en HTTPS"
    fi
fi

# Red√©marrer nginx syst√®me apr√®s si n√©cessaire
if [ -f "/etc/systemd/system/nginx.service" ]; then
    echo "‚ÑπÔ∏è Nginx syst√®me d√©tect√© mais laiss√© arr√™t√© pour √©viter les conflits"
fi

# Affichage final
echo ""
echo "üéâ D√âPLOIEMENT SSL TERMIN√â"
echo "========================="
echo ""

if [ -f "./certbot/conf/live/$DOMAIN/fullchain.pem" ]; then
    echo "üîê HTTPS activ√©:"
    echo "   https://$DOMAIN"
    echo "   https://www.$DOMAIN"
else
    echo "‚ö†Ô∏è HTTPS non activ√© (certificat non obtenu)"
    echo "   http://$DOMAIN"
fi

echo ""
echo "üìä √âtat des services:"
docker-compose ps
echo ""
echo "üîç Ports utilis√©s:"
sudo netstat -tlnp | grep -E ':80|:443' || sudo ss -tlnp | grep -E ':80|:443'
echo ""
echo "üí° Commandes utiles:"
echo "   docker-compose logs -f     # Logs en temps r√©el"
echo "   docker-compose restart     # Red√©marrer tous les services"
echo "   curl -v https://$DOMAIN    # Test HTTPS"

# Nettoyage
rm -f nginx-http-only.conf